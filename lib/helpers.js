'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.listFiles = exports.log = exports.ts = exports.getShopPages = exports.getTarget = exports.shopifyRequest = exports.loadConfig = exports.delay = exports.question = undefined;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _co = require('co');

var _co2 = _interopRequireDefault(_co);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _machinepackFs = require('machinepack-fs');

var _machinepackFs2 = _interopRequireDefault(_machinepackFs);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _colors = require('colors');

var _colors2 = _interopRequireDefault(_colors);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _dive = require('dive');

var _dive2 = _interopRequireDefault(_dive);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_bluebird2.default.promisifyAll(_inquirer2.default);

/* global CONFIGVERSION */

var question = exports.question = function (questions) {
  var deferred = _bluebird2.default.pending();
  _inquirer2.default.prompt(questions, function (answers) {
    deferred.resolve(answers);
  });
  return deferred.promise;
};

var delay = exports.delay = function (ms) {
  var deferred = _bluebird2.default.pending();
  setTimeout(function () {
    deferred.resolve();
  }, ms);
  return deferred.promise;
};

var shopify = {
  isRunning: false,
  throttle: 0,
  inFlight: 0,
  rate: 0,
  max: 40,
  queue: []
};

shopify.add = function (item) {
  shopify.queue.push(item);
  if (!shopify.isRunning) {
    shopify.run();
  }
};

shopify.retry = function (item) {
  shopify.queue.unshift(item);
  if (!shopify.isRunning) {
    shopify.run();
  }
};

shopify.run = function () {
  return (0, _co2.default)(function* () {
    shopify.isRunning = true;
    while (shopify.queue.length > 0) {
      let headroom = shopify.max - (shopify.rate + shopify.inFlight);
      if (headroom <= 0) {
        headroom = 0;
      }
      let exponent = headroom * headroom / 9;
      if (exponent <= 0) {
        exponent = 1;
      }

      shopify.throttle = 500 / exponent;

      yield delay(shopify.throttle);
      shopify.request(shopify.queue.shift());
    }
    shopify.isRunning = false;
  });
};

shopify.request = function (item) {
  return (0, _co2.default)(function* () {
    shopify.inFlight += 1;
    var res = yield (0, _axios2.default)(item.request);
    shopify.inFlight -= 1;
    let body = res.data;
    if (body.errors) {
      item.deferred.reject(body.errors);
    } else {
      let limit = res.headers['x-shopify-shop-api-call-limit'];
      limit = limit.split('/');
      shopify.rate = parseInt(_lodash2.default.first(limit), 10);
      shopify.max = parseInt(_lodash2.default.last(limit), 10);

      item.deferred.resolve(res);
    }
  }).catch(function (res) {
    if (_lodash2.default.includes([429], res.status)) {
      shopify.retry(item);
    } else if (_lodash2.default.includes([422], res.status)) {
      let body = res.data;
      if (_lodash2.default.isArray(body.errors.asset)) {
        for (let error of body.errors.asset) {
          console.log(_colors2.default.red(`Error in ${ item.req.filepath } - ${ error }`));
        }
      }
      item.deferred.reject(body.errors);
    } else {
      item.deferred.reject(res);
    }
  });
};

var loadConfig = exports.loadConfig = function () {
  var deferred = _bluebird2.default.pending();
  _machinepackFs2.default.readJson({
    source: 'quickshot.json',
    schema: {}
  }).exec({
    error: deferred.reject,
    doesNotExist: function () {
      deferred.reject(new Error('Shop configuration is missing, have you run \'quickshot configure\'?'));
    },
    couldNotParse: function () {
      deferred.reject(new Error('Shop configuration is corrupt, you may need to delete \'quickshot.json\', and run \'quickshot configure\' again.'));
    },
    success: function (data) {
      if (!data.configVersion || data.configVersion < CONFIGVERSION) {
        deferred.reject(new Error('Shop configuration is from an older incompatible version of quickshot. You need to run \'quickshot configure\' again.'), data);
      }
      deferred.resolve(data);
    }
  });

  return deferred.promise;
};

var shopifyRequest = exports.shopifyRequest = function (req) {
  req.deferred = _bluebird2.default.pending();
  shopify.add(req);
  return req.deferred.promise;
};

var getTarget = exports.getTarget = function* (config, argv) {
  if (argv['target']) {
    var targetName = argv['target'];
  }

  var target = null;
  if (_lodash2.default.isArray(config.targets)) {
    if (targetName) {
      target = _lodash2.default.find(config.targets, { target_name: targetName });
      if (!target) {
        throw new Error(`Could not find target '${ targetName }'`);
      }
    } else {
      var targetChoices = _lodash2.default.map(config.targets, target => {
        return `[${ target.target_name }] - '${ target.theme_name }' at ${ target.domain }.myshopify.com`;
      });
      if (config.targets.length > 1) {
        let choice = yield question([{
          type: 'list',
          name: 'target',
          message: 'Select target',
          default: null,
          choices: targetChoices
        }]);
        target = config.targets[_lodash2.default.indexOf(targetChoices, choice.target)];
      } else if (config.targets.length === 1) {
        target = _lodash2.default.first(config.targets);
      }
    }
  } else {
    throw new Error(`No targets configured! Run 'quickshot configure' and create a new target.`);
  }

  target.auth = 'Basic ' + new Buffer(`${ target.api_key }:${ target.password }`).toString('base64');
  return target;
};

var getShopPages = exports.getShopPages = function* (target) {
  var chunkSize = 250;
  var page = 1;
  var pages = [];
  var pagesBody = {
    pages: [0]
  };

  while (pagesBody.pages.length !== 0) {
    let pagesBody = yield this.shopifyRequest({
      method: 'get',
      url: `https://${ target.api_key }:${ target.password }this.${ target.domain }.myshopify.com/admin/pages.json?limit=${ chunkSize }&page=${ page }`
    });

    pages = pages.concat(pagesBody.pages);
    page += 1;
  }

  return pages;
};

var ts = exports.ts = function () {
  return (0, _moment2.default)().format('hh:mm:ss a');
};

var log = exports.log = function (text) {
  let color = arguments.length <= 1 || arguments[1] === undefined ? 'white' : arguments[1];

  console.log(_colors2.default[color](`${ ts() } - ${ text }`));
};

var listFiles = exports.listFiles = function () {
  let dirPath = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

  var deferred = _bluebird2.default.pending();
  var files = [];

  (0, _dive2.default)(_path2.default.join(process.cwd(), dirPath), { all: true }, function (err, file) {
    if (err) {
      deferred.reject(err);
    }
    if (file.match(/[\(\)]/)) {
      deferred.reject(new Error(`Filename may not contain parentheses, please rename - "${ file }"`));
    }
    files.push(file);
  }, function () {
    deferred.resolve(files);
  });

  return deferred.promise;
};
//# sourceMappingURL=data:application/json;base64,